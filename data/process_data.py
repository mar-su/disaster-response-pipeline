import sys
import pandas as pd
from sqlalchemy import create_engine


def load_data(messages_filepath, categories_filepath):
    """
    Loading messages and categories from `.csv`-files.

    Args:
        messages_filepath: path to `.csv`-file of messages
        categories_filepath: path to `.csv`-file of categories
    Returns:
        Dataframe combining those informations.
    """
    # load messages dataset
    messages = pd.read_csv(messages_filepath)

    # load categories dataset
    categories = pd.read_csv(categories_filepath)

    return pd.merge(messages, categories, on="id")


def clean_data(df):
    """
    Reorganizing categories column and dropping duplicates
    Args:
        df: Dataframe generated by `load_data`
    Returns:
        Cleaned dataframe.
    """
    categories = df.set_index("id")["categories"]

    # Split `categories` into separate category columns.
    # create a dataframe of the 36 individual category columns
    categories = categories.str.split(";", expand=True)

    # select the first row of the categories dataframe
    row = categories.iloc[0, :].values

    # extract names and truncate last two characters ('-0' or '-1')
    category_colnames = [category_name[:-2] for category_name in row]

    # rename the columns of `categories`
    categories.columns = category_colnames


    # Convert category values to just numbers 0 or 1.
    for column in categories:
        # set each value to be the last character of the string
        categories[column] = categories[column].str.split("-").str[1]

        # convert column from string to numeric
        categories[column] = categories[column].astype(int)

    # drop former categories column
    df.drop(columns=["categories"], inplace=True)

    # merge messages and prepared categories dataframe
    df = pd.merge(df, categories, on="id")

    # drop duplicates
    df.drop_duplicates(inplace=True)
    return df

def save_data(df, database_filename):
    """
    Write data to SQLite.

    Args:
        df: Dataframe holding cleaned information
        database_filename: Filename of destination database
    """
    engine = create_engine('sqlite:///{}'.format(database_filename))
    df.to_sql('DisasterResponse', engine, index=False, if_exists="replace")


def main():
    """
    Pre-process data with an ETL-task. Read from `.csv`-files, clean data and
    write to SQLite.
    """
    if len(sys.argv) == 4:

        messages_filepath, categories_filepath, database_filepath = sys.argv[1:]

        print('Loading data...\n    MESSAGES: {}\n    CATEGORIES: {}'
              .format(messages_filepath, categories_filepath))
        df = load_data(messages_filepath, categories_filepath)

        print('Cleaning data...')
        df = clean_data(df)

        print('Saving data...\n    DATABASE: {}'.format(database_filepath))
        save_data(df, database_filepath)

        print('Cleaned data saved to database!')

    else:
        print('Please provide the filepaths of the messages and categories '\
              'datasets as the first and second argument respectively, as '\
              'well as the filepath of the database to save the cleaned data '\
              'to as the third argument. \n\nExample: python process_data.py '\
              'disaster_messages.csv disaster_categories.csv '\
              'DisasterResponse.db')


if __name__ == '__main__':
    main()
